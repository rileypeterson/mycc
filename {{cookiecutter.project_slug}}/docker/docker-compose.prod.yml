version: "3.9"
services:
  db:
    env_file:
      - ../config/.prod.env
    image: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ENV=prod
    volumes:
      - {{cookiecutter.project_slug}}_pgdata:/var/lib/postgresql/data
  web:
    env_file:
      - ../config/.prod.env
    build: ./web/
    entrypoint: ["sh", "/web/scripts/prod.entrypoint.sh"]
    volumes:
      - ../{{cookiecutter.project_slug}}:/{{cookiecutter.project_slug}}
      - ../static:/static
    expose:
      - 8000
    environment:
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ENV=prod
    depends_on:
      - db
  nginx:
    build:
      context: ../nginx/
      dockerfile: ../docker/nginx/Dockerfile
    restart: unless-stopped
    volumes:
      - ../static:/{{cookiecutter.project_slug}}/static
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ../nginx/ddns:/etc/nginx/ddns
    ports:
      - 80:80
      - 443:443
    command: "sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  {{cookiecutter.project_slug}}_pgdata:
